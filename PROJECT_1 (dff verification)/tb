class transaction;
rand bit din;
bit dout;
function transaction copy();
copy=new; 
copy.din=this.din;
copy.dout=this.dout;
endfunction 
function void display(input string tag);
$display("[%0s] DIN:%0d | DOUT=%0D",tag,din,dout);
endfunction
endclass


class generator;
transaction tr;
mailbox #(transaction) mbx;
mailbox #(transaction) mbxref;/*we need to send data to scoreboard , here the data is compared . so we compare the monitor data( which is data after
                              gone through dut) with generator data(data not gone through dut )(incase od adder,if generator data is 1,2 the monitor 
                              output is 5 , now 1+2 (frpm genertaor,ie golden data) is compared with 5 and shows mismatch)*/
event sconext;//sense completion of scoreboard work
event done;//trigger once requested number of stimuli is applied
int count;
function new(mailbox #(transaction) mbx, mailbox #(transaction)mbxref);
this.mbx=mbx;
this.mbxref=mbxref;
tr=new();
endfunction
task run();
repeat(count) begin
assert(tr.randomize) else $error("[GEN FAILED]");
mbx.put(tr.copy);
mbxref.put(tr.copy);
tr.display("GEN");
@(sconext);//next stimuli should only come after the scoreboard work has finished
end
->done;
endtask
endclass
///////////////////////
 class driver;
 transaction tr;
 mailbox #(transaction) mbx;
 virtual dff_if vif;
  function new(mailbox #(transaction) mbx);
this.mbx=mbx;
endfunction
task reset();
vif.rst=1;
 repeat(5)@(posedge vif.clk)
 vif.rst=0;
 @(posedge vif.clk)
 $display("[DRV] :RESET DONE");
endtask

task run();
tr=new();
forever begin
mbx.get(tr);
vif.din=tr.din;
@(posedge vif.clk);
tr.display("DRV");
end 
endtask
endclass
///////////////////////
class monitor;
transaction tr;
mailbox #(transaction) mbx;
virtual dff_if vif;
function new(mailbox # (transaction)mbx);
this.mbx=mbx;
endfunction
 
 task run();
 tr=new();
 forever begin
 repeat(2) @(posedge vif.clk);
 tr.dout=vif.dout;//monitor is fron dut no connection with the driver so no mailbox connecting them
 mbx.put(tr);
 tr.display("MON");
 end
endtask
endclass

/////////////////////////////////////////////////////
class scoreboard;
transaction tr;
transaction trref;
mailbox #(transaction)mbx;
mailbox #(transaction)mbxref;
event sconext;
function new(mailbox #(transaction) mbx, mailbox #(transaction)mbxref);
this.mbx=mbx;
this.mbxref=mbxref;
endfunction

task run();
forever begin
mbx.get(tr);//no need of constructor for trref, and tr since mailbox used
mbxref.get(trref);
tr.display("SCO");
trref.display("REF");
if (tr.dout==trref.din)//checking with golden data, in ither cases data may be different
$display("[SCO]:DATA MATCHED");
else
$display("[SCO]:DATA MISMATCHED");
$display("-------------");
->sconext;
end
endtask
endclass
////////////////////////////////////////////////
class environment;
generator gen;
driver drv;
monitor mon;
scoreboard sco;
event next;

mailbox #(transaction)gdmbx;
mailbox #(transaction)msmbx;
mailbox #(transaction)mbxref;//generator and scoreboard
virtual dff_if vif;//if we need to use any content of interface use like this way

function new(virtual dff_if vif);
gdmbx=new();
mbxref=new();
gen=new(gdmbx,mbxref);
drv=new(gdmbx);
msmbx=new();
mon=new(msmbx);
sco=new(msmbx,mbxref);
this.vif=vif;
drv.vif=this.vif;
mon.vif=this.vif;
gen.sconext=next;
sco.sconext=next;
endfunction

task pre_test();
drv.reset();
endtask

task test();
fork
gen.run();
drv.run();
mon.run();
sco.run();
join
endtask

task post_test();
wait(gen.done.triggered);
$finish();
endtask

task run();
pre_test();
test();
post_test();
endtask
endclass
////////////////////////////////////////////////////
module tb( );
dff_if vif();//dut interface//vif is interface name here 
DUT d1(vif);//instatiate DUT//above interface vif is connected to DUT, its content is also an interface 
initial begin
vif.clk<=0;
end
always#10 vif.clk<=vif.clk;
environment env;
initial begin
env=new(vif);//here env is alloted space and value of vif is passed through function in env
env.gen.count=30;
env.run();
end

initial begin
$dumpfile("dff.vcd");
$dumpvars;
end 
endmodule
